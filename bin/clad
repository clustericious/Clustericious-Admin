#!/usr/bin/env perl

=head1 NAME

clad -- A simple parallel ssh client.

=head1 SYNOPSIS

    clad [log options] [-n] [-a] [-l login] <cluster> <command>

=head1 DESCRIPTION

Read a config file containing a cluster name and a command.
Ssh to every host in the cluster and run the command.

The command(s) will be executed under '/bin/sh -e' regardless
of the login shell for the remote user.

=head1 OPTIONS

=over

=item B<-n>

Dry run, just show the command that would be executed
and each host.

=item B<-a>

Don't colorize the host names in the output.

=item B<-l>

Specify a login name for all ssh connections (proxies, too).

=back

=head1 EXAMPLES

 clad -n devarch uname -a
 clad devarch df -kh
 clad --trace root devarch ping -i 1 localhost

=head1 CONFIGURATION

The configuration file is a L<Clustericious::Config>
file (yaml or json, Mojo templates) and has three
 sections :

env : sets the environment for all commands.
Environment settings will be added to any
environment which is set upon connection
by ssh.

clusters : describes the clusters.  A cluster
is a label and a list of hosts. Each host
can be either a hostname or an array of hostnames.
If it is an array of hostnames it will be treated
as a sequence of hosts through which to proxy, e.g.
    ssh host1 ssh host2 ssh host3...
If the first proxy host is the same for all the hosts
in a cluster, then it can be given separately (see
the example below).

aliases : command aliases.  These may be either
a single command or a list of commands.  Lists
of commands will all be run in the same ssh
session.  Environment variables in the env
section will be set before running commands
(but shell builtins like 'cd' will be run
without any environment setup)

=head1 SAMPLE CONFIGURATION

A sample configuration file ~/etc/Clad.conf :

    ---
    env :
        PATH : /util/bin:/usr/kerberos/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
        PERL5LIB : /util/lib/perl
    clusters :
        devarch:
            - devarch11
            - devarch12
        devmds:
    %# Note that this env hash will be merged with the base env at the top
            env  :
                USER : bob
            hosts :
                 - omidevmds1
        testarch:
            proxy : omitest.omisips.gsfc.nasa.gov
            hosts :
                - acpstestarch3
                - acpstestarch4
    aliases :
        config_init_devarch : git clone acpsdev2:/cm/git/config/config-devarch etc
    %# Note that $CLUSTER becomes the name of the cluster.
        config_init       : git clone acpsdev2:/cm/git/config/config-$CLUSTER etc
        config_show       : cat etc/*
        config_pull       :
            - cd etc
            - git pull
        config_destroy    : rm -rf etc

=head1 NOTES

Manipulating .ssh/config can allow you to reach the head node of
a cluster by proxying through another host.  For instance :

    Host devarch11
    User omidev
    ProxyCommand ssh omidev.gsfc.nasa.gov nc %h %p

    Host devarch12
    User omidev
    ProxyCommand ssh omidev.gsfc.nasa.gov nc %h %p

=head1 SEE ALSO

 Log::Log4perl::CommandLine
 Clustericious::Config

=cut

use feature 'say';
use File::Basename 'dirname';
use File::Spec;
use Log::Log4perl::CommandLine (':all', ':loginit' => <<"EOT");
           log4perl.rootLogger = INFO, Screen
           log4perl.appender.Screen = Log::Log4perl::Appender::ScreenColoredLevels
           log4perl.appender.Screen.layout = Log::Log4perl::Layout::PatternLayout
           log4perl.appender.Screen.layout.ConversionPattern = @{[ $ENV{HARNESS_ACTIVE} ? '#' : '' ]} [%-5p] %d %F{1} (%L) %m %n
EOT

use lib join '/', File::Spec->splitdir(dirname(__FILE__)), 'lib';
use lib join '/', File::Spec->splitdir(dirname(__FILE__)), '..', 'lib';
use lib join '/', File::Spec->splitdir(dirname(__FILE__)), '..', 'lib', 'perl';

use Clustericious::Admin;
use Getopt::Std qw/getopts/;

unless (@ARGV >=2 ) {
    say "Not enough arguments : @ARGV";
    say "usage $0 <cluster> <command>";
    say "Available clusters : ".join ' ', Clustericious::Admin->clusters;
    say "Available aliases  : ".join ' ', Clustericious::Admin->aliases;
    exit;
}

my %opts;
getopts('nal:',\%opts);
Clustericious::Admin->run(\%opts,@ARGV);

1;

