#!/usr/bin/env perl

=head1 NAME

clad -- Clustericious Admin command line tool

=head1 SYNOPSIS

    clad [log options] [-n] <cluster> <command>

=head1 DESCRIPTION

Read a config file containing a cluster name and a command.
Ssh to every host in the cluster and run the command.

=head1 OPTIONS

=over

=item B<-n>

Dry run, just show the command that would be executed
and each host.

=back

=head1 EXAMPLES

 clad -n devarch uname -a
 clad devarch df -kh
 clad --trace root devarch ping -i 1 localhost

=head1 SAMPLE CONFIGURATION

A sample configuration file ~/etc/Clad.conf :

    ---
    env :
        PATH : /util/bin:/usr/kerberos/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
        PERL5LIB : /util/lib/perl
    clusters :
        devarch:
            - devarch11
            - devarch12
    aliases :
        config_init_devarch : git clone acpsdev2:/cm/git/config/config-devarch etc
    %# Note that $CLUSTER becomes the name of the cluster.
        config_init         : git clone acpsdev2:/cm/git/config/config-$CLUSTER etc
        config_show         : cat etc/*
        config_update       : cd etc && git pull
        config_destroy      : rm -rf etc

=head1 NOTES

Manipulating .ssh/config can allow you to reach the head node of
a cluster by proxying through another host.  For instance :

    Host devarch11
    User omidev
    ProxyCommand ssh omidev.gsfc.nasa.gov nc %h %p

    Host devarch12
    User omidev
    ProxyCommand ssh omidev.gsfc.nasa.gov nc %h %p

=head1 SEE ALSO

 Log::Log4perl::CommandLine
 Clustericious::Config

=cut

use feature 'say';
use File::Basename 'dirname';
use File::Spec;
use Log::Log4perl::CommandLine (':all', ':loginit' => <<"EOT");
           log4perl.rootLogger = INFO, Screen
           log4perl.appender.Screen = Log::Log4perl::Appender::ScreenColoredLevels
           log4perl.appender.Screen.layout = Log::Log4perl::Layout::PatternLayout
           log4perl.appender.Screen.layout.ConversionPattern = @{[ $ENV{HARNESS_ACTIVE} ? '#' : '' ]} [%-5p] %d %F{1} (%L) %m %n
EOT

use lib join '/', File::Spec->splitdir(dirname(__FILE__)), 'lib';
use lib join '/', File::Spec->splitdir(dirname(__FILE__)), '..', 'lib';
use lib join '/', File::Spec->splitdir(dirname(__FILE__)), '..', 'lib', 'perl';

use Clustericious::Admin;

unless (@ARGV >=2 ) {
    say "Not enough arguments : @ARGV";
    say "usage $0 <cluster> <command>";
    say "Available clusters : ".join ' ', Clustericious::Admin->clusters;
    say "Available aliases  : ".join ' ', Clustericious::Admin->aliases;
    exit;
}

Clustericious::Admin->run(@ARGV);

1;

